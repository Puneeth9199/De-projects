from awscrt import mqtt, http
from awsiot import mqtt_connection_builder
import sys
import threading
import time
import json
import random
from utils.command_line_utils import CommandLineUtils

# This script connects to AWS IoT Core, publishes Smart Agriculture data,
# and subscribes to the same topic to confirm message receipt.

cmdData = CommandLineUtils.parse_sample_input_pubsub()

received_count = 0
received_all_event = threading.Event()

# Callback when connection is interrupted
def on_connection_interrupted(connection, error, **kwargs):
    print(f"Connection interrupted. error: {error}")

# Callback when connection is resumed
def on_connection_resumed(connection, return_code, session_present, **kwargs):
    print(f"Connection resumed. return_code: {return_code} session_present: {session_present}")
    if return_code == mqtt.ConnectReturnCode.ACCEPTED and not session_present:
        print("Session did not persist. Resubscribing to existing topics...")
        resubscribe_future, _ = connection.resubscribe_existing_topics()
        resubscribe_future.add_done_callback(on_resubscribe_complete)

def on_resubscribe_complete(resubscribe_future):
    resubscribe_results = resubscribe_future.result()
    print(f"Resubscribe results: {resubscribe_results}")
    for topic, qos in resubscribe_results['topics']:
        if qos is None:
            sys.exit(f"Server rejected resubscribe to topic: {topic}")

# Callback when the subscribed topic receives a message
def on_message_received(topic, payload, dup, qos, retain, **kwargs):
    print(f"Received message from topic '{topic}': {payload}")
    global received_count
    received_count += 1
    if received_count == cmdData.input_count:
        received_all_event.set()

if __name__ == '__main__':
    # Set up proxy if needed
    proxy_options = None
    if cmdData.input_proxy_host and cmdData.input_proxy_port != 0:
        proxy_options = http.HttpProxyOptions(
            host_name=cmdData.input_proxy_host,
            port=cmdData.input_proxy_port)

    # Create an MQTT connection
    mqtt_connection = mqtt_connection_builder.mtls_from_path(
        endpoint=cmdData.input_endpoint,
        port=cmdData.input_port,
        cert_filepath=cmdData.input_cert,
        pri_key_filepath=cmdData.input_key,
        ca_filepath=cmdData.input_ca,
        client_id=cmdData.input_clientId,
        clean_session=False,
        keep_alive_secs=30,
        http_proxy_options=proxy_options,
        on_connection_interrupted=on_connection_interrupted,
        on_connection_resumed=on_connection_resumed)

    print(f"Connecting to {cmdData.input_endpoint} with client ID '{cmdData.input_clientId}'...")
    connect_future = mqtt_connection.connect()
    connect_future.result()
    print("Connected!")

    # Subscribe to the topic
    message_topic = cmdData.input_topic
    print(f"Subscribing to topic '{message_topic}'...")
    subscribe_future, _ = mqtt_connection.subscribe(
        topic=message_topic,
        qos=mqtt.QoS.AT_LEAST_ONCE,
        callback=on_message_received)
    subscribe_future.result()
    print("Subscribed!")

    # Publish Smart Agriculture data
    message_count = cmdData.input_count
    print("Publishing Smart Agriculture data...")
    publish_count = 1

    while (publish_count <= message_count) or (message_count == 0):
        # Generate Smart Agriculture data
        message = {
            "farm_id": f"field_{random.randint(1, 5)}",
            "timestamp": time.strftime("%Y-%m-%dT%H:%M:%S", time.gmtime()),
            "soil_moisture": round(random.uniform(20, 60), 2),
            "rainfall": round(random.uniform(0, 20), 2),
            "crop_health_index": round(random.uniform(50, 100), 2),
            "animal_temperature": round(random.uniform(35, 40), 2),
            "water_level": round(random.uniform(50, 100), 2),
            "wind_speed": round(random.uniform(0, 30), 2),
            "solar_radiation": round(random.uniform(800, 1200), 2)
        }

        # Convert message to JSON and publish
        message_json = json.dumps(message)
        print(f"Publishing message to topic '{message_topic}': {message_json}")
        mqtt_connection.publish(
            topic=message_topic,
            payload=message_json,
            qos=mqtt.QoS.AT_LEAST_ONCE)
        time.sleep(5)
        publish_count += 1

    # Wait for all messages to be received (if count is non-zero)
    if message_count != 0 and not received_all_event.is_set():
        print("Waiting for all messages to be received...")
        received_all_event.wait()
    print(f"{received_count} message(s) received.")

    # Disconnect from MQTT
    print("Disconnecting...")
    disconnect_future = mqtt_connection.disconnect()
    disconnect_future.result()
    print("Disconnected!")
B: Lambda Function Code
import json
import boto3
import os
from datetime import datetime
from decimal import Decimal

# Initialize DynamoDB resource
dynamodb = boto3.resource('dynamodb')
table_name = os.environ['DYNAMODB_TABLE']
table = dynamodb.Table(table_name)

def lambda_handler(event, context):
    print(f"Received event: {json.dumps(event)}")
    
    # Check for 'Records' key
    if 'Records' in event:
        for record in event['Records']:
            try:
                # Parse payload for IoT rule
                payload = json.loads(record['Payload']) if 'Payload' in record else json.loads(record['Sns']['Message'])
                process_payload(payload)
            except Exception as e:
                print(f"Error processing data: {str(e)}")
    else:
        # Handle test events
        try:
            process_payload(event)
        except Exception as e:
            print(f"Error processing data: {str(e)}")

    return {
        'statusCode': 200,
        'body': "Data processed successfully!"
    }

def process_payload(payload):
    # Convert float values to Decimal
    item = {
        'farm_id': payload.get('farm_id', 'unknown'),
        'timestamp': payload.get('timestamp', datetime.utcnow().isoformat()),
        'soil_moisture': Decimal(str(payload.get('soil_moisture', 0))),
        'rainfall': Decimal(str(payload.get('rainfall', 0))),
        'crop_health_index': Decimal(str(payload.get('crop_health_index', 0))),
        'animal_temperature': Decimal(str(payload.get('animal_temperature', 0))),
        'water_level': Decimal(str(payload.get('water_level', 0))),
        'wind_speed': Decimal(str(payload.get('wind_speed', 0))),
        'solar_radiation': Decimal(str(payload.get('solar_radiation', 0)))
    }

    # Write to DynamoDB
    table.put_item(Item=item)
    print(f"Data written to DynamoDB: {item}")

